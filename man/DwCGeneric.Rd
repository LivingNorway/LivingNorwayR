% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DwCGeneric.R
\name{DwCGeneric}
\alias{DwCGeneric}
\title{R6 DwC Generic class}
\format{
\code{\link{R6Class}} object.
}
\description{
R6 class representing a generic data structure for a Darwin Core archive file
}
\details{
The \code{DwcGeneric} class serves a base class to all Darwin Core archive file types. This class supports all kinds of Darwin Core
archive files but may miss some of the specialised functionality of the more specialist classes.
See \url{https://dwc.tdwg.org/terms/}{the Darwin core reference guide} for more information on Darwin core classes and the terms
supported by them.
}
\seealso{
\code{\link[DwCTerm]{DwCTerm}}

\code{\link[DwCTerm]{DwCTerm}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DwCGeneric-setTableName}{\code{DwCGeneric$setTableName()}}
\item \href{#method-DwCGeneric-getTableName}{\code{DwCGeneric$getTableName()}}
\item \href{#method-DwCGeneric-importDataTable}{\code{DwCGeneric$importDataTable()}}
\item \href{#method-DwCGeneric-new}{\code{DwCGeneric$new()}}
\item \href{#method-DwCGeneric-getDwCClassName}{\code{DwCGeneric$getDwCClassName()}}
\item \href{#method-DwCGeneric-getDwCTermInfo}{\code{DwCGeneric$getDwCTermInfo()}}
\item \href{#method-DwCGeneric-getTermMapping}{\code{DwCGeneric$getTermMapping()}}
\item \href{#method-DwCGeneric-getAssociatedTerms}{\code{DwCGeneric$getAssociatedTerms()}}
\item \href{#method-DwCGeneric-print}{\code{DwCGeneric$print()}}
\item \href{#method-DwCGeneric-exportAsDataFrame}{\code{DwCGeneric$exportAsDataFrame()}}
\item \href{#method-DwCGeneric-exportTable}{\code{DwCGeneric$exportTable()}}
\item \href{#method-DwCGeneric-getIDIndex}{\code{DwCGeneric$getIDIndex()}}
\item \href{#method-DwCGeneric-getIDName}{\code{DwCGeneric$getIDName()}}
\item \href{#method-DwCGeneric-setDefaultYearFormat}{\code{DwCGeneric$setDefaultYearFormat()}}
\item \href{#method-DwCGeneric-getDefaultYearFormat}{\code{DwCGeneric$getDefaultYearFormat()}}
\item \href{#method-DwCGeneric-getTableTermName}{\code{DwCGeneric$getTableTermName()}}
\item \href{#method-DwCGeneric-clone}{\code{DwCGeneric$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-setTableName"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-setTableName}{}}}
\subsection{Method \code{setTableName()}}{
Set the name of the file that the data will print to when preparing the Darwin core archive
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$setTableName(inTableName)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inFileName}}{A character scalar giving the name to give the data file in a Darwin core archive}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getTableName"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getTableName}{}}}
\subsection{Method \code{getTableName()}}{
Retrieve the name of the file that the data will print to when preparing the Darwin core archive
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getTableName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The name currently set as the file name in the output archive
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-importDataTable"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-importDataTable}{}}}
\subsection{Method \code{importDataTable()}}{
Import data from a \code{data.frame} into a \code{DwCGeneric} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$importDataTable(objectData, idColumnInfo, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{objectData}}{A \code{data.frame} containing the data to import into the object}

\item{\code{idColumnInfo}}{Either a \code{character} scalar containing the column name
of \code{objectData} or an \code{integer} scalar giving the index of the column of
\code{objectData} that corresponds to the ID variable}

\item{\code{...}}{A named set of parameter corresponding to Darwin core terms associated
with the DwCGeneric class type. Each is either a a \code{character} scalar containing
the column name of \code{objectData} or an \code{integer} scalar giving the index of
the column of \code{objectData} that corresponds to the term}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-new"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-new}{}}}
\subsection{Method \code{new()}}{
Create a new DwCGeneric object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$new(
  classTermInfo,
  associatedTerms,
  objectData,
  idColumnInfo,
  nameAutoMap = FALSE,
  defDateFormat = "YYYY-MM-DD",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{classTermInfo}}{A \code{DwCTerm} object containing the term information for the class}

\item{\code{associatedTerms}}{A \code{list} of \code{DwCTerm} objects that contain all the terms associated with the class}

\item{\code{objectData}}{A \code{data.frame} containing the data to import into the object}

\item{\code{idColumnInfo}}{Either a \code{character} scalar containing the column name
of \code{objectData} or an \code{integer} scalar giving the index of the column of
\code{objectData} that corresponds to the ID variable}

\item{\code{nameAutoMap}}{A \code{logical} scalar that if \code{TRUE} maps the columns of \code{objectData}
to their respective Darwin core terms based on the column names}

\item{\code{defDateFormat}}{A \code{character} scalar providing the default format for strings denoting dates in the
data table.  See the \url{https://dwc.tdwg.org/text/#1-introduction}{Darwin Core text guide} for expected values
for this string.}

\item{\code{...}}{A named set of parameter corresponding to Darwin core terms associated
with the DwCGeneric class type. Each is either a a \code{character} scalar containing
the column name of \code{objectData} or an \code{integer} scalar giving the index of
the column of \code{objectData} that corresponds to the term}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{DwCGeneric} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getDwCClassName"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getDwCClassName}{}}}
\subsection{Method \code{getDwCClassName()}}{
Retrieve the name of the class used in Darwin core
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getDwCClassName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{character} scalar contining the name of the Darwin core class
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getDwCTermInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getDwCTermInfo}{}}}
\subsection{Method \code{getDwCTermInfo()}}{
Retrieve the term information of thee Darwin core class of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getDwCTermInfo()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{DwCTerm} object containing the term information of the Darwin core class
of the object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getTermMapping"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getTermMapping}{}}}
\subsection{Method \code{getTermMapping()}}{
Retrieve the mapping information of the Darwin core terms associated with the class to the
columns in the data table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getTermMapping()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{data.frame} with one row for each Darwin core term associated with the object's
class with two columns: \code{columnIndex} containing the column index of the associated term in the
table and \code{columnName} containg the name of the column
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getAssociatedTerms"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getAssociatedTerms}{}}}
\subsection{Method \code{getAssociatedTerms()}}{
Retrieve the terms associated with the Darwin core class of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getAssociatedTerms()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{list} of \code{DwCTerm} objects containing the term information
Print object to console
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-print"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-print}{}}}
\subsection{Method \code{print()}}{
Print the term information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-exportAsDataFrame"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-exportAsDataFrame}{}}}
\subsection{Method \code{exportAsDataFrame()}}{
Export the data contained in the table as a \code{data.frame}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$exportAsDataFrame()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{data.frame} of the object's table data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-exportTable"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-exportTable}{}}}
\subsection{Method \code{exportTable()}}{
Export the table as a text file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$exportTable(
  fileName,
  append = FALSE,
  quote = TRUE,
  sep = "\\t",
  eol = "\\n",
  na = "NA",
  dec = ".",
  qmethod = "escape",
  fileEncoding = "",
  renameMapped = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fileName}}{Either a \code{character} string naming a file or a connection open for writing.
\code{""} indicates to the console.}

\item{\code{append}}{A \code{logical} scalar. Only relevant if \code{fileName} is a \code{character} string. If
\code{TRUE}, the output is appended to the file. If \code{FALSE}, any existing file of the name is
destroyed.}

\item{\code{quote}}{A \code{logical} scalar or a \code{numeric} vector. If \code{TRUE}, any character or factor
columns will be surrounded by double quotes. If a \code{numeric} vector, its elements are taken as the
indeces of columns to quote. In both cases, row and column names are quoted if they are written. If \code{FALSE},
nothing is quoted.}

\item{\code{sep}}{The field seperator stirng. Values within each row are separated by this string.}

\item{\code{eol}}{The character(s) to print at the end of each line (row).}

\item{\code{na}}{The string to use for missing values in the data.}

\item{\code{dec}}{The string to use for decimal points in numeric or complex columns: must be a single character}

\item{\code{qmethod}}{A character string specifying how to deal with embedded double quote characters when
quoting strings. Must be one of \code{"escape"}, in which case the quote character is escaped in C style by a
backslash, or \code{"double"}, in which case it is doubled}

\item{\code{fileEncoding}}{A character string. If non-empty, declares the encoding to be used on a file so the
character data can be re-encoded as they are written}

\item{\code{renameMapped}}{A \code{logical} scalar that, if \code{TRUE}, replaces mapped column names with their Darwin
core versions}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getIDIndex"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getIDIndex}{}}}
\subsection{Method \code{getIDIndex()}}{
Retrieve the column index in the dataset that refers to the unique ID in the dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getIDIndex()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An \code{integer} scalar giving the index of the column that refers to the unique dataset IDs
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getIDName"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getIDName}{}}}
\subsection{Method \code{getIDName()}}{
Retrieve the column name in the dataset that refers to the unique ID in the dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getIDName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{character} scalar giving the column name that refers to the unique dataset IDs
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-setDefaultYearFormat"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-setDefaultYearFormat}{}}}
\subsection{Method \code{setDefaultYearFormat()}}{
Set the default date format in the dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$setDefaultYearFormat(detDateFormat)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{detDateFormat}}{A \code{character} scalar providing the default format for strings denoting dates in the
data table.  See the \url{https://dwc.tdwg.org/text/#1-introduction}{Darwin Core text guide} for expected values
for this string.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getDefaultYearFormat"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getDefaultYearFormat}{}}}
\subsection{Method \code{getDefaultYearFormat()}}{
Retrieve the default date format
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getDefaultYearFormat()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{character} scalar containing the default date format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-getTableTermName"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-getTableTermName}{}}}
\subsection{Method \code{getTableTermName()}}{
Retrieve the term name for the table
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$getTableTermName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{character} scalar containing the name to the term defining the table
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DwCGeneric-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DwCGeneric-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DwCGeneric$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
